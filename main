{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[],"dockerImageVersionId":30840,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import tensorflow as tf\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import accuracy_score, classification_report, confusion_matrix\nimport time\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# CNN Model\ndef cnn_model():\n    model = tf.keras.models.Sequential([\n        tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),\n        tf.keras.layers.MaxPooling2D((2, 2)),\n        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n        tf.keras.layers.MaxPooling2D((2, 2)),\n        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),\n        tf.keras.layers.Flatten(),\n        tf.keras.layers.Dense(64, activation='relu'),\n        tf.keras.layers.Dense(10, activation='softmax')\n    ])\n    model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])\n    return model\n\n# Random Forest Model\ndef random_forest_model():\n    rf_model = RandomForestClassifier(n_estimators=100, random_state=42)\n    return rf_model","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-01-22T08:07:24.641492Z","iopub.execute_input":"2025-01-22T08:07:24.641806Z","iopub.status.idle":"2025-01-22T08:07:39.072698Z","shell.execute_reply.started":"2025-01-22T08:07:24.641775Z","shell.execute_reply":"2025-01-22T08:07:39.072020Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load MNIST dataset\n(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T08:07:39.073510Z","iopub.execute_input":"2025-01-22T08:07:39.073897Z","iopub.status.idle":"2025-01-22T08:07:41.160185Z","shell.execute_reply.started":"2025-01-22T08:07:39.073877Z","shell.execute_reply":"2025-01-22T08:07:41.159290Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Preprocess the data: Flatten the images into 1D arrays for RandomForest, and normalize images for CNN\nx_train_flat = x_train.reshape(x_train.shape[0], -1).astype('float32') / 255\nx_test_flat = x_test.reshape(x_test.shape[0], -1).astype('float32') / 255\n\nx_train_cnn = x_train.reshape((x_train.shape[0], 28, 28, 1)).astype('float32') / 255\nx_test_cnn = x_test.reshape((x_test.shape[0], 28, 28, 1)).astype('float32') / 255","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T08:07:41.161015Z","iopub.execute_input":"2025-01-22T08:07:41.161237Z","iopub.status.idle":"2025-01-22T08:07:41.401608Z","shell.execute_reply.started":"2025-01-22T08:07:41.161219Z","shell.execute_reply":"2025-01-22T08:07:41.400642Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Training and evaluating CNN model\ncnn_start_time = time.time()\ncnn = cnn_model()\ncnn.fit(x_train_cnn, y_train, epochs=5, batch_size=64, verbose=0)\ncnn_end_time = time.time()\ncnn_training_time = cnn_end_time - cnn_start_time\n\ncnn_test_loss, cnn_test_acc = cnn.evaluate(x_test_cnn, y_test, verbose=0)\ncnn_y_pred = cnn.predict(x_test_cnn)\ncnn_y_pred = np.argmax(cnn_y_pred, axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T08:07:41.403476Z","iopub.execute_input":"2025-01-22T08:07:41.403773Z","iopub.status.idle":"2025-01-22T08:08:02.957779Z","shell.execute_reply.started":"2025-01-22T08:07:41.403751Z","shell.execute_reply":"2025-01-22T08:08:02.957031Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Training and evaluating Random Forest model\nrf_start_time = time.time()\nrf = random_forest_model()\nrf.fit(x_train_flat, y_train)\nrf_end_time = time.time()\nrf_training_time = rf_end_time - rf_start_time\n\nrf_y_pred = rf.predict(x_test_flat)\nrf_test_acc = accuracy_score(y_test, rf_y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T08:08:02.958726Z","iopub.execute_input":"2025-01-22T08:08:02.958943Z","iopub.status.idle":"2025-01-22T08:08:38.649389Z","shell.execute_reply.started":"2025-01-22T08:08:02.958923Z","shell.execute_reply":"2025-01-22T08:08:38.648656Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Print Classification Report and Confusion Matrix for CNN\nprint(\"CNN Classification Report:\\n\", classification_report(y_test, cnn_y_pred))\nprint(\"CNN Confusion Matrix:\")\ncnn_cm = confusion_matrix(y_test, cnn_y_pred)\nsns.heatmap(cnn_cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=np.arange(10), yticklabels=np.arange(10))\nplt.title(\"CNN Confusion Matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"True\")\nplt.show()\n\n# Print Classification Report and Confusion Matrix for Random Forest\nprint(\"Random Forest Classification Report:\\n\", classification_report(y_test, rf_y_pred))\nprint(\"Random Forest Confusion Matrix:\")\nrf_cm = confusion_matrix(y_test, rf_y_pred)\nsns.heatmap(rf_cm, annot=True, fmt=\"d\", cmap=\"Blues\", xticklabels=np.arange(10), yticklabels=np.arange(10))\nplt.title(\"Random Forest Confusion Matrix\")\nplt.xlabel(\"Predicted\")\nplt.ylabel(\"True\")\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T08:08:38.650280Z","iopub.execute_input":"2025-01-22T08:08:38.650511Z","iopub.status.idle":"2025-01-22T08:08:39.651439Z","shell.execute_reply.started":"2025-01-22T08:08:38.650492Z","shell.execute_reply":"2025-01-22T08:08:39.650474Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Comparison Results\nprint(f\"CNN Test Accuracy: {cnn_test_acc:.4f}\")\nprint(f\"Random Forest Test Accuracy: {rf_test_acc:.4f}\")\nprint(f\"CNN Training Time: {cnn_training_time:.2f} seconds\")\nprint(f\"Random Forest Training Time: {rf_training_time:.2f} seconds\")\n\n# Plotting the comparison\nlabels = ['CNN', 'Random Forest']\naccuracies = [cnn_test_acc, rf_test_acc]\ntraining_times = [cnn_training_time, rf_training_time]\n\nfig, axes = plt.subplots(1, 2, figsize=(12, 5))\n\n# Accuracy Plot\naxes[0].bar(labels, accuracies, color=['blue', 'orange'])\naxes[0].set_title('Test Accuracy Comparison')\naxes[0].set_ylabel('Accuracy')\n\n# Training Time Plot\naxes[1].bar(labels, training_times, color=['blue', 'orange'])\naxes[1].set_title('Training Time Comparison')\naxes[1].set_ylabel('Time (seconds)')\n\nplt.tight_layout()\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-01-22T08:08:39.652331Z","iopub.execute_input":"2025-01-22T08:08:39.652721Z","iopub.status.idle":"2025-01-22T08:08:39.965749Z","shell.execute_reply.started":"2025-01-22T08:08:39.652683Z","shell.execute_reply":"2025-01-22T08:08:39.964922Z"}},"outputs":[],"execution_count":null}]}